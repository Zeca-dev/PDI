



import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.RotatedRect;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

import javax.imageio.*;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.image.ImageObserver;
import java.awt.image.Kernel;
import java.io.*;
import java.text.AttributedCharacterIterator;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Size;
import org.opencv.core.Point.*;
import org.opencv.core.Scalar;




/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jcarl
 */
public class jfPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form jfPrincipal
     * 
     */
    public static String img1; //Nomes das imagens
    public String img2;
    
    public String sourceImg1; //Caminhos das imagens
    public String sourceImg2;
    
    public Mat matImg1; //Matrizes das imagens
    public Mat matImg2;
    public Mat matResult;
     public Mat matExibe, m;
    
    public BufferedImage buffer1;
    public BufferedImage buffer2;
    public BufferedImage bufferResult;
 
    
    
    public jfPrincipal() {
        initComponents();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
       
        setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbImg1 = new javax.swing.JButton();
        jbImg2 = new javax.swing.JButton();
        jlImg1 = new javax.swing.JLabel();
        jlImg2 = new javax.swing.JLabel();
        jlResult = new javax.swing.JLabel();
        jCheckBoxCompsta = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemSoma = new javax.swing.JMenuItem();
        jMenuItemSub = new javax.swing.JMenuItem();
        jMenuItemMul = new javax.swing.JMenuItem();
        jMenuItemDiv = new javax.swing.JMenuItem();
        jMenuItemAND = new javax.swing.JMenuItem();
        jMenuItemOR = new javax.swing.JMenuItem();
        jMenuItemXOR = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemRotacao = new javax.swing.JMenuItem();
        jMenuItemTranslacao = new javax.swing.JMenuItem();
        jMenuItemEscala = new javax.swing.JMenuItem();
        jMenuItemReflexao = new javax.swing.JMenuItem();
        jMenuItemCisalhamento = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItemPseudoCores = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenuItem31 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UFERSA - PDI - Processamento Digital de Imagens - José Carlos");
        setExtendedState(4);

        jbImg1.setText("IMG 1");
        jbImg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImg1ActionPerformed(evt);
            }
        });

        jbImg2.setText("IMG 2");
        jbImg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImg2ActionPerformed(evt);
            }
        });

        jlImg1.setText("      ");

        jlImg2.setText("    ");

        jCheckBoxCompsta.setText("Composta");

        jMenu2.setText("Aritméticas");

        jMenuItemSoma.setText("Soma");
        jMenuItemSoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSomaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSoma);

        jMenuItemSub.setText("Subtração");
        jMenuItemSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSubActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSub);

        jMenuItemMul.setText("Multiplicação");
        jMenuItemMul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMulActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemMul);

        jMenuItemDiv.setText("Divisão");
        jMenuItemDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDivActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemDiv);

        jMenuItemAND.setText("AND");
        jMenuItemAND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemANDActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAND);

        jMenuItemOR.setText("OR");
        jMenuItemOR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemORActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemOR);

        jMenuItemXOR.setText("XOR");
        jMenuItemXOR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemXORActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemXOR);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Geométricas");

        jMenuItemRotacao.setText("Rotação");
        jMenuItemRotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRotacaoActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemRotacao);

        jMenuItemTranslacao.setText("Translação");
        jMenuItemTranslacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTranslacaoActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemTranslacao);

        jMenuItemEscala.setText("Escala");
        jMenuItemEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEscalaActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemEscala);

        jMenuItemReflexao.setText("Reflexão");
        jMenuItemReflexao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReflexaoActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemReflexao);

        jMenuItemCisalhamento.setText("Cisalhamento");
        jMenuItemCisalhamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCisalhamentoActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemCisalhamento);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Cores");

        jMenuItem7.setText("Mostrar bandas RGB");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem2.setText("RGB para HSB");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem8.setText("RGB para YUV");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem9.setText("RGB para CMYK");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItemPseudoCores.setText("Pseudocores");
        jMenuItemPseudoCores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPseudoCoresActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPseudoCores);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Transformações Cinza");

        jMenu6.setText("Lineares");

        jMenuItem3.setText("Linear");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem3);

        jMenuItem4.setText("Linear por partes");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem4);

        jMenuItem13.setText("Negativo");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem13);

        jMenu4.add(jMenu6);

        jMenu5.setText("Não Lineares");

        jMenuItem1.setText("Logaritmo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenuItem5.setText("Raíz quadrada");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem6.setText("Exponencial");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem10.setText("Quadrado");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenu4.add(jMenu5);

        jMenuBar1.add(jMenu4);

        jMenu7.setText("Histograma");

        jMenuItem11.setText("Mostrar histograma");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem11);

        jMenuItem12.setText("Equalizar histgrama");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem12);

        jMenuItem16.setText("Correção Gama");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem16);

        jMenuBar1.add(jMenu7);

        jMenu8.setText("Filtros");

        jMenu9.setText("Passa-baixas");

        jMenuItem14.setText("Media");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem14);

        jMenuItem15.setText("Mediana");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem15);

        jMenuItem17.setText("Máximo");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem17);

        jMenuItem18.setText("Mínimo");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem18);

        jMenuItem19.setText("Moda");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem19);

        jMenuItem20.setText("Preservação de bordas");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem20);

        jMenu8.add(jMenu9);

        jMenu10.setText("Passa-altas");

        jMenuItem21.setText("H1, H2, M1, M2 e M3");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem21);

        jMenuItem22.setText("Alto-reforço (high-boost)");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem22);

        jMenu8.add(jMenu10);

        jMenu11.setText("Meios-tons (halftoning)");

        jMenuItem23.setText("Pontilhado Ordenado (2x2, 2x3, 3x3)");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem23);

        jMenuItem24.setText("Pontilhado com difusão");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem24);

        jMenu8.add(jMenu11);

        jMenuBar1.add(jMenu8);

        jMenu12.setText("Segmentação");

        jMenuItem25.setText("Detecçcão de pontos");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem25);

        jMenuItem26.setText("Detecção de retas");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem26);

        jMenuItem27.setText("Detecção de bordas");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem27);

        jMenu13.setText("Limiarização");

        jMenuItem29.setText("Global");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem29);

        jMenuItem30.setText("Local");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItem30);

        jMenu12.add(jMenu13);

        jMenu14.setText("Segmentação de regiões");

        jMenuItem28.setText("Crescimento de região");
        jMenu14.add(jMenuItem28);

        jMenuItem31.setText("Algoritmo de watersheld");
        jMenuItem31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem31ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem31);

        jMenu12.add(jMenu14);

        jMenuBar1.add(jMenu12);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbImg1)
                            .addComponent(jbImg2)
                            .addComponent(jlImg1)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jlImg2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jlResult, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxCompsta)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxCompsta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbImg1)
                        .addGap(18, 18, 18)
                        .addComponent(jlImg1)
                        .addGap(18, 18, 18)
                        .addComponent(jbImg2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlImg2)
                        .addGap(0, 260, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jlResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void mostraImagem(Mat matriz, Size tamanho, int n ){
        //Cria a imagem a ser exibida na Tela principal
                matExibe = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
                Imgproc.resize(matriz, matExibe, tamanho);
                bufferResult = ShowWindow.matToBufferedImage(matExibe);
                Icon icon = new ImageIcon(bufferResult);
                if (n==2){
                 jlImg2.setIcon(icon);  
                }else{
                 jlResult.setIcon(icon);
                }
    }
    
    public void mostrarBanda(){
         if(jlImg1.getIcon()==null){ //Se não houver imagem selecionada          
            jlImg2.setIcon(null);
             return;
        }
        String s = JOptionPane.showInputDialog("Informe a banda (rgb)", "r");
          
               matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
            
          for (int i=0; i<matImg1.rows(); i++){               
             for (int j=0; j< matImg1.cols(); j++){
                
                 if(jlImg2.getIcon()!=null){
                 
                    double g[] = matImg2.get(i, j);
                   // double g[] = matExibe.get(i, j);
                    if (s.equals("r") || s.equals("R")){
                    g[0]=0;
                    g[1]=0;
                    // g[2]=0;           
                    matResult.put(i, j, g);
                   }

                   if (s.equals("g") || s.equals("G")){
                    g[0]=0;
                    // g[1]=0;
                    g[2]=0;
                    matResult.put(i, j, g);
                   }

                   if (s.equals("b") || s.equals("B")){
                    //  g[0]=0;
                    g[1]=0;
                    g[2]=0;
                    matResult.put(i, j, g);
                    }  
                   
                   if (s.equals("0")){ //AINDA NÃO SEI COMO MOSTRAR A QUARTA COR
                    g[0]=0;
                    g[1]=0;
                    g[2]=0;   
                    
                    matResult.put(i, j, g);
                   }
                   
                 }else{
                    double g[] = matImg1.get(i, j); 
                    if (s.equals("r") || s.equals("R") ){
                    g[0]=0;
                    g[1]=0;
                    // g[2]=0;
                    matResult.put(i, j, g);
                   }

                   if (s.equals("g") || s.equals("G")){
                    g[0]=0;
                    // g[1]=0;
                    g[2]=0;
                    matResult.put(i, j, g);
                   }

                   if (s.equals("b") || s.equals("B")){
                    //  g[0]=0;
                    g[1]=0;
                    g[2]=0;
                    matResult.put(i, j, g);
                   }
                 }
                    
             }
        }
          
          ShowWindow.showWindow("Banda "+s, matResult);
    }
    private void jMenuItemSomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSomaActionPerformed
        // TODO add your handling code here: //SOMA
        if (img1.length()>0 && img2.length()>0){
       
                matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);
                
                double[] v = new double[matResult.cols() * matResult.rows() * (int) matResult.elemSize()];
                int x = 0;
                for (int i = 0; i < matImg1.rows(); i++) {
                    for (int j = 0; j < matImg1.cols(); j++) {

                        v[x] = matImg1.get(i, j)[0] + matImg2.get(i, j)[0];
                        x++;
                    }
                }
                ShowWindow.showWindow("Soma", ShowWindow.normalizaImagem(v, matResult));

       
        }
    }//GEN-LAST:event_jMenuItemSomaActionPerformed

    private void jMenuItemSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSubActionPerformed
        // TODO add your handling code here:
        if (img1.length()>0 &&img2.length()>0){


            matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);

            
            double[] v = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
            int x=0;
            for (int i=0; i<matImg1.rows(); i++){               
             for (int j=0; j< matImg1.cols(); j++){

                v[x] = matImg1.get(i, j)[0] - matImg2.get(i, j)[0];    
                x++;
             }        
            }      
                   ShowWindow.showWindow("Subtração",ShowWindow.normalizaImagem(v, matResult));
        }
    }//GEN-LAST:event_jMenuItemSubActionPerformed

    private void jbImg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImg1ActionPerformed
        // TODO add your handling code here:
        //Cria open dialog e abri seleciona imagem 1
        JFileChooser chooser = new JFileChooser();
       // FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Images", "JPG");
       // chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION){
            img1 = chooser.getSelectedFile().getName();
            sourceImg1 = chooser.getSelectedFile().getPath();
            this.matImg1 = Imgcodecs.imread(sourceImg1);
            
           //Colocar imagem 1 no Icone do label1
           Imgproc.resize(matImg1, matImg1, new Size(243,243));
            buffer1 = ShowWindow.matToBufferedImage(matImg1);
            
            Icon icon = new ImageIcon(buffer1);
            
            jlImg1.setIcon(icon);
            jbImg1.setText(img1);
           
            //Resultado
           if (jlImg2.getIcon()==null){
                mostraImagem(matImg1, new Size(400,400),0);
            
            }
            
        }
        else{ //Zera todo os parâmetros
            img1 = "";
            sourceImg1 = "";
            matImg1 = null;
            jlImg1.setIcon(null);
            jbImg1.setText("IMG 1");
            jlResult.setIcon(null);
        }
    }//GEN-LAST:event_jbImg1ActionPerformed

    private void jbImg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImg2ActionPerformed
        // TODO add your handling code here:
         //Cria open dialog e abri seleciona imagem 2
        JFileChooser chooser = new JFileChooser();
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Images", "JPG");
       // chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION){
            img2 = chooser.getSelectedFile().getName();
            sourceImg2 = chooser.getSelectedFile().getPath();
            this.matImg2 = Imgcodecs.imread(sourceImg2);
            
            //Colocar imagem 2 no Icone do label2
            Imgproc.resize(matImg2, matImg2, new Size(243,243));
            buffer2 = ShowWindow.matToBufferedImage(matImg2);
            Icon icon = new ImageIcon(buffer2);
            jlImg2.setIcon(icon);
            jbImg2.setText(img2);
            
            jlResult.setIcon(null);
         
        }
        else{ //Zera todo os parâmetros
            img2 = "";
            sourceImg2 ="";
            matImg2 = null;
            jlImg2.setIcon(null);
            jbImg2.setText("IMG 2");
            
            if (jlImg1.getIcon()!=null){
                mostraImagem(matImg1, new Size(400,400),0);
            }
        }
    }//GEN-LAST:event_jbImg2ActionPerformed

    private void jMenuItemMulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMulActionPerformed
        // TODO add your handling code here:
                if (img1.length()>0 &&img2.length()>0){

                    matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);

                    double[] v = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
                    int x=0;
                    for (int i=0; i<matImg1.rows(); i++){               
                     for (int j=0; j< matImg1.cols(); j++){

                        v[x] = matImg1.get(i, j)[0] * matImg2.get(i, j)[0];    
                        x++;
                     }        
                    }      
                   ShowWindow.showWindow("Multiplicação",ShowWindow.normalizaImagem(v, matResult));
          
       }
    }//GEN-LAST:event_jMenuItemMulActionPerformed

    private void jMenuItemDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDivActionPerformed
        // TODO add your handling code here:
               if (img1.length()>0 &&img2.length()>0){


            matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);

            double[] v = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
            int x=0;
            for (int i=0; i<matImg1.rows(); i++){               
             for (int j=0; j< matImg1.cols(); j++){
                if (matImg2.get(i, j)[0] != 0){   //Evita divisão por zero
                    v[x] = matImg1.get(i, j)[0] / matImg2.get(i, j)[0];    
                    x++;
                }else{
                   v[x] = matImg1.get(i, j)[0];    
                    x++; 
                }
             }        
            }      
          
           ShowWindow.showWindow("Divisão",ShowWindow.normalizaImagem(v,matResult) );
        }
    }//GEN-LAST:event_jMenuItemDivActionPerformed

    private void jMenuItemANDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemANDActionPerformed
        // TODO add your handling code here:
           if (img1.length()>0 &&img2.length()>0){
          
            matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);

            double[] v = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
            int x=0;
            for (int i=0; i<matImg1.rows(); i++){               
             for (int j=0; j< matImg1.cols(); j++){

                v[x] = (int)matImg1.get(i, j)[0] & (int)matImg2.get(i, j)[0];    
                x++;
             }        
            }      
                   ShowWindow.showWindow("AND",ShowWindow.normalizaImagem(v, matResult));
        }
    }//GEN-LAST:event_jMenuItemANDActionPerformed

    private void jMenuItemORActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemORActionPerformed
        // TODO add your handling code here:
         if (img1.length()>0 &&img2.length()>0){

            matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);

           double[] v = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
            int x=0;
            for (int i=0; i<matImg1.rows(); i++){               
             for (int j=0; j< matImg1.cols(); j++){

                v[x] = (int)matImg1.get(i, j)[0] | (int)matImg2.get(i, j)[0];    
                x++;
             }        
            }      
                   ShowWindow.showWindow("OR",ShowWindow.normalizaImagem(v, matResult));
        }
    }//GEN-LAST:event_jMenuItemORActionPerformed

    private void jMenuItemXORActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemXORActionPerformed
        // TODO add your handling code here:
         if (img1.length()>0 &&img2.length()>0){

            matResult = new Mat(matImg1.rows(), matImg1.cols(), CvType.CV_8UC1);

            double[] v = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
            int x=0;
            for (int i=0; i<matImg1.rows(); i++){               
             for (int j=0; j< matImg1.cols(); j++){

                v[x] = (int)matImg1.get(i, j)[0] ^ (int)matImg2.get(i, j)[0];    
                x++;
             }        
            }      
                   ShowWindow.showWindow("XOR",ShowWindow.normalizaImagem(v, matResult));
        }
    }//GEN-LAST:event_jMenuItemXORActionPerformed

    private void jMenuItemTranslacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTranslacaoActionPerformed
        // TRANSLAÇÃO
        if (img1.length() != 0){
           matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
           int x = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor de X.", "0"));
           int y = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor de Y.", "0"));

           double v[] = {1,0,x,0,1,y}; //Cria vetor da máscara

            m = new Mat(2, 3, CvType.CV_32F);
 
            m.put(0, 0, v); //Preenche imagem

            //Mostra resultado
            if (jCheckBoxCompsta.isSelected()){
                if(jlResult.getIcon()!=null){
                //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matExibe, matResult, m, matExibe.size());
                }else{
                    //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matImg1, matResult, m, matImg1.size());
                }
                mostraImagem(matResult, new Size(400,400),0); 
            }else{
                
                //Aplica a matriz na imagem e põe o resultado na saída
                Imgproc.warpAffine(matImg1, matResult, m, matImg1.size());
                mostraImagem(matResult, new Size(400,400),0);
            } 
         }
    
    }//GEN-LAST:event_jMenuItemTranslacaoActionPerformed

    private void jMenuItemRotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRotacaoActionPerformed
        // TODO add your handling code here:
        //Rotação
        if (img1.length() != 0){
            matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
            double angulo = Double.parseDouble(JOptionPane.showInputDialog("Forneça o ângulo.","30"));
            //Cria a matriz de trnasformação para Rotação
            m = Imgproc.getRotationMatrix2D(new org.opencv.core.Point(matImg1.cols()/2, matImg1.rows()/2), -angulo, 1);

           
            //Mostra resultado
             if (jCheckBoxCompsta.isSelected()){
                 if(jlResult.getIcon()!=null){
                //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matExibe, matResult, m, matExibe.size());
                }else{
                    //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matImg1, matResult, m, matImg1.size());
                }
                mostraImagem(matResult, new Size(400,400),0); 
            }else{
                  //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matImg1, matResult, m, matImg1.size());
                mostraImagem(matResult, new Size(400,400),0);
            } 
        }
    }//GEN-LAST:event_jMenuItemRotacaoActionPerformed

    private void jMenuItemEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEscalaActionPerformed
        // ESCALA
        if (img1.length() != 0)
        {//Estou aumentandoem percentual do tamanho original
             matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
            int fator = Integer.parseInt( JOptionPane.showInputDialog("Entre com o fator de aumento(%).","50")); //Percentual
           // int fator = Integer.parseInt( JOptionPane.showInputDialog("Entre com o fator de aumento.","2")); //Valor
            
            matResult = matImg1;
         
            //Mostra resultado
           if (jCheckBoxCompsta.isSelected()){
                mostraImagem(matResult, new Size(matImg1.width() + matImg1.width()*fator/100, matImg1.height() + matImg1.height()*fator/100),0); //Percentual
           // mostraImagem(matResult,new Size(matImg1.width()*fator, matImg1.height()*fator)); //Valor
            
            }else{
               mostraImagem(matResult, new Size(matImg1.width() + matImg1.width()*fator/100, matImg1.height() + matImg1.height()*fator/100),0); //Percentual
           // mostraImagem(matResult,new Size(matImg1.width()*fator, matImg1.height()*fator)); //Valor
           
            } 
          
        }
    }//GEN-LAST:event_jMenuItemEscalaActionPerformed

    private void jMenuItemCisalhamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCisalhamentoActionPerformed
        // CISALHAMENTO
        if (img1.length() != 0){
            matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
            String s = JOptionPane.showInputDialog("Cisalhamento (X ou Y)?.", "x");

       if (s.equals("x")){
               double v[] = {1,0,0,1,1,0}; //Cria vetor da máscara em X
               m = new Mat(2, 3, CvType.CV_32F);
               m.put(0, 0, v); 
            }else{
               double v[] = {1,1,0,0,1,0}; //Cria vetor da máscara em Y
               m = new Mat(2, 3, CvType.CV_32F);
               m.put(0, 0, v); 
               
            }
          
            //Mostra resultado
            if (jCheckBoxCompsta.isSelected()){
                if(jlResult.getIcon()!=null){
                //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matExibe, matResult, m, matExibe.size());
                }else{
                    //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matImg1, matResult, m, matImg1.size());
                }
                mostraImagem(matResult, new Size(400,400),0); 
            }else{
                //Aplica a matriz na imagem e põe o resultado na saída
                 Imgproc.warpAffine(matImg1, matResult, m, matImg1.size());
                mostraImagem(matResult, new Size(400,400),0);
            }           
         }  
        
 
    }//GEN-LAST:event_jMenuItemCisalhamentoActionPerformed

    private void jMenuItemReflexaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReflexaoActionPerformed
        // REFLEXÃO
         if (jlImg1.getIcon()==null){return;} 
         
           matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
           int r = Integer.parseInt(JOptionPane.showInputDialog("Forneça eixo para a reflexão: 1->X,  2->Y  3->XY.", "1"));
  
            
            if (jCheckBoxCompsta.isSelected()){
                for (int i=0; i<matExibe.rows(); i++){               
                for (int j=0; j< matExibe.cols(); j++){
                    switch(r){
                        case 1:{ matExibe.put(i , j+ matExibe.rows()-2*j-1, matExibe.get(i, j)); break;} //Em X
                        case 2: { matExibe.put(i+ matExibe.cols()-2*i-1 , j, matExibe.get(i, j)); break;} //Em Y
                        default: { matExibe.put(i+ matExibe.cols()-2*i-1 , j+ matExibe.rows()-2*j-1, matExibe.get(i, j));} //Em X e Y
                    }
                
                }        
            } 
            mostraImagem(matExibe, new Size(400,400),0); 
            
            }else{
             for (int i=0; i<matImg1.rows(); i++){               
                for (int j=0; j< matImg1.cols(); j++){
                    switch(r){
                        case 1:{ matResult.put(i , j+ matImg1.rows()-2*j-1, matImg1.get(i, j)); break;} //Em X
                        case 2: { matResult.put(i+ matImg1.cols()-2*i-1 , j, matImg1.get(i, j)); break;} //Em Y
                        default: { matResult.put(i+ matImg1.cols()-2*i-1 , j+ matImg1.rows()-2*j-1, matImg1.get(i, j));} //Em X e Y
                    }
                
                }        
            }  
                 
                mostraImagem(matResult, new Size(400,400),0);
            } 
      
    }//GEN-LAST:event_jMenuItemReflexaoActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        mostrarBanda();
                
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
         if(jlImg1.getIcon()==null){ //Se não houver imagem selecionada
            return;
        }
         matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
       // Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_HSV2BGR); //HSB
        Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_BGR2YUV); //YUV
        matImg2 = matResult;
        //Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_BGR2Lab); //CMYK
        mostraImagem(matResult, new Size(300,300), 2); //Exibe na imagem 2
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
         if(jlImg1.getIcon()==null){ //Se não houver imagem selecionada
            return;
        }
         matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
        Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_HSV2BGR); //HSB
         matImg2 = matResult; 
       // Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_YUV2BGR); //YUV
        //Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_BGR2Lab); //CMYK
        mostraImagem(matResult, new Size(300,300), 2); //Exibe na imagem 2
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
         if(jlImg1.getIcon()==null){ //Se não houver imagem selecionada
            return;
        }
         matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
       // Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_HSV2BGR); //HSB
       // Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_YUV2BGR); //YUV
        Imgproc.cvtColor(matImg1, matResult, Imgproc.COLOR_BGR2Lab); //CMYK
         matImg2 = matResult;
        mostraImagem(matResult, new Size(300,300), 2); //Exibe na imagem 2
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItemPseudoCoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPseudoCoresActionPerformed
        // TODO add your handling code here:
        //PSEUDO COLORIZAÇÃO
        if(jlImg1.getIcon()==null){ //Se não houver imagem selecionada
            return;
        }
          matResult = new Mat(matImg1.rows(), matImg1.cols(), matImg1.type());
          //Pega o intervalo
        //  int x = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor inicial do intervalo a recolorir.", "0"));
        //  int y = Integer.parseInt(JOptionPane.showInputDialog("Forneça Forneça o valor final do intervalo a recolorir..", "60"));
           
        for (int i=0; i < matResult.rows(); i++){ //Joga a máscara na matriz
                for (int j=0; j<matResult.cols(); j++){
                    //Intervalos de mudança
                  if ( matImg1.get(i, j)[2] >=0 && matImg1.get(i, j)[2]<=50){
                      double v[] = matImg1.get(i, j);
                     v[0] = 160;
                     v[1] = 57;
                     v[2] = 0;
                      matResult.put(i, j, v);     
                  }    
                  
                  if ( matImg1.get(i, j)[2] >=51 && matImg1.get(i, j)[2]<=100){
                      double v[] = matImg1.get(i, j);
                     v[0] = 20;
                     v[1] = 60;
                     v[2] = 10;
                      matResult.put(i, j, v);     
                  } 
                  
                  if ( matImg1.get(i, j)[2] >=101 && matImg1.get(i, j)[2]<=150){
                      double v[] = matImg1.get(i, j);
                     v[0] = 57;
                     v[1] = 0;
                     v[2] = 120;
                      matResult.put(i, j, v);     
                  } 
                  
                  if ( matImg1.get(i, j)[2] >=151 && matImg1.get(i, j)[2]<=200){
                      double v[] = matImg1.get(i, j);
                     v[0] = 15;
                     v[1] = 80;
                     v[2] = 200;
                      matResult.put(i, j, v);     
                  } 
                  
                  if ( matImg1.get(i, j)[2] >=201 && matImg1.get(i, j)[2]<=255){
                      double v[] = matImg1.get(i, j);
                     v[0] = 57;
                     v[1] = 0;
                     v[2] = 160;
                      matResult.put(i, j, v);     
                  } 
                }              
            }
          mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
        
    }//GEN-LAST:event_jMenuItemPseudoCoresActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (jlImg1.getIcon()==null){return;}
        //Pega o intervalo
          int GMin = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor Mínimo.", "0"));
          int GMax = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor Máximo.", "255"));
           
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double[] v = new double[matExibe.cols() * matExibe.rows() * (int) matExibe.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {                           
                            v[x] = matExibe.get(i, j)[0];
                            x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, ShowWindow.trasnfLinear(GMax, GMin, v, matExibe, 0)), new Size(400,400), 0); //Exibe na imagem 3
        }else{
            double[] v = new double[matImg1.cols() * matImg1.rows() * (int) matImg1.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                            v[x] = matImg1.get(i, j)[0];
                            x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, ShowWindow.trasnfLinear(GMax, GMin, v, matImg1, 0)), new Size(400,400), 0); //Exibe na imagem 3
        }                                                                                                   
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
         if (jlImg1.getIcon()==null){return;}
        //Pega o intervalo
          int GMin = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor Mínimo.", "0"));
          int GMax = Integer.parseInt(JOptionPane.showInputDialog("Forneça o valor Máximo.", "255"));
           
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double[] v = new double[matExibe.cols() * matExibe.rows() * (int) matExibe.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {                           
                            v[x] = matExibe.get(i, j)[0];
                            x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, ShowWindow.trasnfLinear(GMax, GMin, v, matExibe, 1)), new Size(600,600), 0); //Exibe na imagem 3
        }else{
            double[] v = new double[matImg1.cols() * matImg1.rows() * (int) matImg1.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                            v[x] = matImg1.get(i, j)[0];
                            x++;
                        }
                    }
                    //AQUI, PASSANDO O VALOR 1 NO ÚLTIMO PARAMETRO DA TRANSFLINEAR, A TRANSFORMAÇÃO SERÁ FEITA POR PARTES
                    mostraImagem(ShowWindow.normalizaImagem(v, ShowWindow.trasnfLinear(GMax, GMin, v, matImg1, 1)), new Size(400,400), 0); //Exibe na imagem 3
        }    
                
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here: //LOGARITMO
         if (jlImg1.getIcon()==null){return;}
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double[] v = new double[matExibe.cols() * matExibe.rows() * (int) matExibe.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {  
                            if ( matExibe.get(i, j)[0] == 0){
                              v[x] = Math.log( matExibe.get(i, j)[0]+1);  
                            }else{ 
                             v[x] = Math.log( matExibe.get(i, j)[0]);
                            }
                           x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, matExibe), new Size(400,400), 0); //Exibe na imagem 3
        }else{
            double[] v = new double[matImg1.cols() * matImg1.rows() * (int) matImg1.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                            if ( matImg1.get(i, j)[0] == 0){
                              v[x] = Math.log(matImg1.get(i, j)[0]+1);  
                            }else{
                              v[x] = Math.log( matImg1.get(i, j)[0]);  
                            }
                            x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, matImg1), new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here: //RAIZ QUADRADA
        if (jlImg1.getIcon()==null){return;}
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double[] v = new double[matExibe.cols() * matExibe.rows() * (int) matExibe.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {                          
                             v[x] = Math.sqrt(matExibe.get(i, j)[0]);  
                           x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, matExibe), new Size(400,400), 0); //Exibe na imagem 3
        }else{
            double[] v = new double[matImg1.cols() * matImg1.rows() * (int) matImg1.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                             v[x] = Math.sqrt(matImg1.get(i, j)[0]);  
                            x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, matImg1), new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here: //EXPONENCIAL
        if (jlImg1.getIcon()==null){return;}
              
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            Mat m = new Mat(matExibe.rows(), matExibe.cols(), CvType.CV_8UC1);
            double v[] = new double[matExibe.rows() * matExibe.cols()* (int) matExibe.type()];
            int x=0;
                    for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {  
                            if ( matExibe.get(i, j)[0] == 0){
                              v[x]= Math.pow(Math.E, matExibe.get(i, j)[0])+1;  
                            }else{
                               v[x]= Math.pow(Math.E, matExibe.get(i, j)[0]);  
                            }
                            m.put(i, j, v[x]);
                        x++;  
                        }
                       
                    }
                    mostraImagem(m, new Size(400,400), 0); //Exibe na imagem 3
        }else{
            int x=0;
            Mat m = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);  
            double v[] = new double[matImg1.rows() *matImg1.cols()* (int) matImg1.type()];
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                            if ( matImg1.get(i, j)[0] == 0){
                              v[x] = Math.pow(Math.E, matImg1.get(i, j)[0])+1;  
                            }else{
                                v[x]= Math.pow(Math.E, matImg1.get(i, j)[0]);   
                            }
                            m.put(i, j, v[x]);
                         x++; 
                        }
                        
                    }
                   mostraImagem(  m, new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here: //QUADRADO
        if (jlImg1.getIcon()==null){return;}
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double[] v = new double[matExibe.cols() * matExibe.rows() * (int) matExibe.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {  
                            if ( matExibe.get(i, j)[0] == 0){
                              v[x] = Math.pow( matExibe.get(i, j)[0], 2);  
                            }else{
                              v[x] = Math.pow( matExibe.get(i, j)[0], 2);  
                            }
                           x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, matExibe), new Size(400,400), 0); //Exibe na imagem 3
        }else{
            double[] v = new double[matImg1.cols() * matImg1.rows() * (int) matImg1.elemSize()];
                    int x = 0;
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                            if ( matImg1.get(i, j)[0] == 0){
                              v[x] = Math.pow(matImg1.get(i, j)[0], 2);  
                            }else{
                              v[x] = Math.pow( matImg1.get(i, j)[0], 2);  
                            }
                            x++;
                        }
                    }
                    mostraImagem(ShowWindow.normalizaImagem(v, matImg1), new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here: //NEGATIVO
        if (jlImg1.getIcon()==null){return;}  
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            matResult = new Mat( matExibe.rows(), matExibe.cols(),  CvType.CV_8UC1);
                   for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {  
                            matResult.put(i, j, 255 - matExibe.get(i, j)[0]);
                        }
                    }
                    mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
        }else{
                matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
                    for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {                           
                             matResult.put(i, j, 255 - matImg1.get(i, j)[0]);
                        }
                    }
                    mostraImagem( matResult, new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed

        //MOSTRAR HISTOGRAMA
        
        if (jlImg1.getIcon()==null){return;}
         
        String s = JOptionPane.showInputDialog("Utilizar legenda? (S para exibir legenda)", "s");
            //cria histograma
            if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double[] v = new double[matExibe.rows() * matExibe.cols() * (int)matExibe.elemSize()]; //Vetor para os pixels
            //Zera as posições do vetor
            for (int i = 0; i <v.length; i++) {
                v[i]= 0;
            }
            for (int i = 0; i < matExibe.rows(); i++) {
                        for (int j = 0; j < matExibe.cols(); j++) {   
                            //Conta cada nível de cinza e guarda essa contagem na sua posição do vetor
                             v[ (int) matExibe.get(i, j)[0] ] =  v[ (int)matExibe.get(i, j)[0] ] + 1;      
                        }
                    }
            
                
            //CRIA GRAFICO DE HISTOGRAMA
          if (s.equals("S")||s.equals("s")){  //Com legenda
             ShowWindow.criaGrafico(v, true);
          }else{ //Sem legenda
             ShowWindow.criaGrafico(v, false);
          }
            }else { //Pega a imagem original como entrada
            double[] v = new double[matImg1.rows() * matImg1.cols() * (int)matImg1.elemSize()]; //Vetor para os pixels
            //Zera as posições do vetor
            for (int i = 0; i <v.length; i++) {
                v[i]= 0;
            }
            for (int i = 0; i < matImg1.rows(); i++) {
                        for (int j = 0; j < matImg1.cols(); j++) {   
                            //Conta cada nível de cinza e guarda essa contagem na sua posição do vetor
                             v[ (int) matImg1.get(i, j)[0] ] =  v[ (int) matImg1.get(i, j)[0] ] + 1;      
                        }
                    }
            
              //CRIA GRAFICO DE HISTOGRAMA
              if (s.equals("S")||s.equals("s")){  //Com legenda
                 ShowWindow.criaGrafico(v, true);
              }else{ //Sem legenda
                 ShowWindow.criaGrafico(v, false);
              }  
            }
            
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        //EQUALIZAR HISTOGRAMA
        if (jlImg1.getIcon()==null){return;}
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);

            for (int i = 0; i < matImg1.rows(); i++) {
                for (int j = 0; j < matImg1.cols(); j++) {                           
                     matResult.put(i, j, matImg1.get(i, j)[0]);
                }
            }
 
           Imgproc.equalizeHist(matResult, matResult); 
           mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
        
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here: //Media
        if (jlImg1.getIcon()==null){return;}    
        
        //Pega o tamanho
          int t = Integer.parseInt(JOptionPane.showInputDialog("Forneça o tamanho.", "3"));
          
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            Imgproc.blur(matImg1, matResult, new Size(t,t));
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
            Imgproc.blur(matImg1, matResult, new Size(t,t));
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
        
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here: //Mediana
        if (jlImg1.getIcon()==null){return;}    
        //Pega o tamanho
          int t = Integer.parseInt(JOptionPane.showInputDialog("Forneça o tamanho.", "3"));
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            Imgproc.medianBlur(matExibe, matExibe, t );
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
            Imgproc.medianBlur(matImg1, matResult, t);
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
        
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // TODO add your handling code here:
        //CORREÇÃO GAMA
        if (jlImg1.getIcon()==null){return;}    
        //Pega o tamanho
          double gama = Double.parseDouble(JOptionPane.showInputDialog("Forneça o fator gama.", "1.1"));
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            for (int i = 0; i < matExibe.rows(); i++) {
                for (int j = 0; j < matExibe.cols(); j++) {                           
                    // matExibe.put(i, j, Math.pow(matExibe.get(i, j)[0], gama)); //SLIDE
                     matExibe.put(i, j, (Math.pow(matExibe.get(i, j)[0]/255, 1/gama))*255); //S= (r/255^(1/g))*255
                }
            }
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            
            for (int i = 0; i < matImg1.rows(); i++) {
                for (int j = 0; j < matImg1.cols(); j++) {                           
                     //matResult.put(i, j, Math.pow(matImg1.get(i, j)[0], gama));  //SLIDE  
                     matResult.put(i, j, (Math.pow(matImg1.get(i, j)[0]/255, 1/gama))*255);  // S=(r/255^(1/g))*255
                }
            }
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        // FILTRAGEM COM PRESERVAÇÃO DE BORDAS
        if (jlImg1.getIcon()==null){return;}    
        //Pega o tamanho
          int t = Integer.parseInt(JOptionPane.showInputDialog("Forneça o tamanho.", "3"));
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            Imgproc.bilateralFilter(matExibe, matExibe, t, 75, 75, Core.BORDER_DEFAULT);
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
            Imgproc.bilateralFilter(matImg1, matResult, t, 75, 75, Core.BORDER_DEFAULT);
           
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed

        // MAXIMMO
        if (jlImg1.getIcon()==null){return;}    
        //Pega o tamanho
         // int t = Integer.parseInt(JOptionPane.showInputDialog("Forneça o tamanho.", "3"));
        double v[] = new double[matImg1.cols() * matImg1.rows() * (int)matImg1.elemSize()];
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
          
        int x=0;
        
        for (int i = 0; i < matExibe.rows(); i++) {
                for (int j = 0; j < matExibe.cols(); j++) {                           
                    double maior=0;
                    try {
                        if (maior < matExibe.get(i-1, j-1)[0] ){
                            maior = matExibe.get(i-1, j-1)[0];
                        }
                        if (maior < matExibe.get(i, j-1)[0] ){
                            maior = matExibe.get(i, j-1)[0];
                        }
                        if (maior < matExibe.get(i+1, j-1)[0]  ){
                            maior =  matExibe.get(i+1, j-1)[0] ;
                        }
                        if (maior < matExibe.get(i-1, j)[0]){
                            maior = matExibe.get(i-1, j)[0];
                        }
                        if (maior < matExibe.get(i, j)[0]){
                            maior = matExibe.get(i, j)[0];
                        }
                        if (maior < matExibe.get(i+1, j)[0] ){
                            maior = matExibe.get(i+1, j)[0];
                        }
                        if (maior < matExibe.get(i-1, j+1)[0] ){
                            maior = matExibe.get(i-1, j+1)[0];
                        }
                        if (maior <  matExibe.get(i, j+1)[0] ){
                            maior =  matExibe.get(i, j+1)[0];
                        }
                        if (maior <  matExibe.get(i+1, j+1)[0] ){
                            maior =  matExibe.get(i+1, j+1)[0];
                        }
                        
                        
                    } catch (Exception e) {
                        v[x]=0;
                    }
                    
                    v[x] = maior;
                    x++;   
                }
            } 
        
           // matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            matExibe.put(0, 0, v);
            
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            
            int x=0;
        
        for (int i = 0; i < matImg1.rows(); i++) {
                for (int j = 0; j < matImg1.cols(); j++) {                           
                    double maior=0;
                    try {
                        if (maior < matImg1.get(i-1, j-1)[0] ){
                            maior = matImg1.get(i-1, j-1)[0];
                        }
                        if (maior < matImg1.get(i, j-1)[0] ){
                            maior = matImg1.get(i, j-1)[0];
                        }
                        if (maior <  matImg1.get(i+1, j-1)[0]  ){
                            maior =  matImg1.get(i+1, j-1)[0] ;
                        }
                        if (maior < matImg1.get(i-1, j)[0]){
                            maior = matImg1.get(i-1, j)[0];
                        }
                        if (maior < matImg1.get(i, j)[0]){
                            maior = matImg1.get(i, j)[0];
                        }
                        if (maior <matImg1.get(i+1, j)[0] ){
                            maior = matImg1.get(i+1, j)[0];
                        }
                        if (maior < matImg1.get(i-1, j+1)[0] ){
                            maior = matImg1.get(i-1, j+1)[0];
                        }
                        if (maior <  matImg1.get(i, j+1)[0] ){
                            maior =  matImg1.get(i, j+1)[0];
                        }
                        if (maior <  matImg1.get(i+1, j+1)[0] ){
                            maior =  matImg1.get(i+1, j+1)[0];
                        }
                        
                        
                    } catch (Exception e) {
                        v[x]=maior;
                    }
                    
                    v[x] = maior;
                    x++;   
                }
            }
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            matResult.put(0, 0, v);
             
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        // FILTROS PASSA-ALTAS H E M
        
        if (jlImg1.getIcon()==null){return;}    
        //Pega o filtro
          int f = Integer.parseInt(JOptionPane.showInputDialog("Escolha o filtro: \n "
                  + "1 -> H1    2 -> H2    3 -> M1    4 -> M2    5 -> M3", "1"));
         
        //Criação da máscara
        Mat mask = new Mat(3, 3, CvType.CV_32FC1 ); //usar tipo: CvType.CV_32FC1 por causa da função de convolução
       
        switch (f){
            case 1: { 
                float H1[]  = {0, -1, 0, -1, 4, -1, 0, -1, 0};
                mask.put(0, 0, H1); 
                break;
            }
            case 2: { 
                float H2[]  = {-1, -1, -1, -1, 8, -1, -1, -1, -1};
                mask.put(0, 0, H2); 
                break;}
            case 3: { 
                float M1[]  = {-1, -1, -1, -1, 9, -1, -1, -1, -1,};
                mask.put(0, 0, M1); 
                break;}
            case 4: { 
                float M2[]  = {1, -2, 1, -2, 5, -2, 1, -2, 1};
                mask.put(0, 0, M2); 
                break;}
            case 5: { 
                float M3[] = {0, -1, 0, -1, 5, -1, 0, -1, 0}; 
                mask.put(0, 0, M3); 
                break;}
            default: {JOptionPane.showMessageDialog(null, "Filtro inválido."); return;} 
         }
        //fim da criação da máscara
        
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            
            Imgproc.filter2D(matExibe, matExibe, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());

            Imgproc.filter2D(matImg1, matResult, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        // HIGH-BOOST
        if (jlImg1.getIcon()==null){return;}  
        //Pega o valor de A
          int A = Integer.parseInt(JOptionPane.showInputDialog("Forneça A. ","1"));
         matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
        
            float HB[]  = {-A, -A, -A, -A, 9*A+1, -A, -A, -A, -A}; //Máscara para alto-reforço COM 8 NO CENTRO TAMBÉM FICA LEGAL
          //float HB[]  = {-1, -1, -1, -1, 9*A+1, -1, -1, -1, -1}; //Máscara para alto-reforço COM 8 NO CENTRO TAMBÉM FICA LEGAL
          
            Mat mask = new Mat(3, 3, CvType.CV_32FC1 ); //usar tipo: CvType.CV_32FC1 por causa da função de convolução      
            mask.put(0, 0, HB);

            if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
                Imgproc.filter2D(matExibe, matExibe, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
                mostraImagem(matExibe, new Size(400,400), 0);
            }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
                Imgproc.filter2D(matImg1, matResult, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
                mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
            
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        // TODO add your handling code here:
        //PONTILHADOS 1
        if (jlImg1.getIcon()==null){return;}  
         
        int t = Integer.parseInt(JOptionPane.showInputDialog("Escolha o filtro de Detecção: \n "
            + "1. 2x2\n" +
              "2. 2x3\n" +
              "3. 3x3","1"));

        
        
         if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            
                
        //        mostraImagem(matExibe, new Size(400,400), 0);
                
            }else{
            
            
                mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
         }
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
        // TODO add your handling code here:
        //DETECÇÃO DE BORDAS
        if (jlImg1.getIcon()==null){return;}    
        //Pega o filtro
          int f = Integer.parseInt(JOptionPane.showInputDialog("Escolha o filtro de Detecção: \n "
                  + "1. Roberts X\n" +
                    "2. Roberts Y\n" +
                    "3. Roberts cruzado\n" +
                    "4. Prewiit Gx\n" +
                    "5. Prewiit Gy\n" +
                    "6. Prewiit magnitude\n" +
                    "7. Sobel Gx\n" +
                    "8. Sobel Gy\n" +
                    "9. Sobel magnitude\n" +
                    "10. Krish\n" +
                    "11. Robison\n" +
                    "12. Frey-Chen\n" +
                    "13. Laplaciano\n"+
                    "14. H1 e H2", "1"));
          
           //Criação da máscara
        Mat mask = new Mat(3, 3, CvType.CV_32FC1 ); //usar tipo: CvType.CV_32FC1 por causa da função de convolução
       
        switch (f){
            case 1: { 
                float RX[]  = {1,0,0,-1}; //ROBERTS X
                mask.put(0, 0, RX); 
                break;
            }
            case 2: { 
                float RY[]  = {0,1,-1,0}; //ROBERTS Y
                mask.put(0, 0, RY); 
                break;
            }
            case 3: { 
               // float RC[]  = {1,0,-1,0}; //Roberts Cruzado Gx
                // float RC[]  = {1,-1,0,0}; //Roberts Cruzado Gy
                float RC[]  = {1,1,-1,-1}; //Roberts Cruzado
                
                mask.put(0, 0, RC); 
                break;}
            case 4: { 
                float PWx[]  = {-1,0,1,-1,0,1,-1,0,1}; //PREWITT X //Prewiit Gx
                mask.put(0, 0, PWx); 
                break;
            }
            case 5: { 
                float PWy[] = {-1,-1,-1,0,0,0,1,1,1}; //PREWITT Y // Prewiit Gy
                mask.put(0, 0, PWy); 
                break;}
            case 6: { 
                float PWm[] = {-1,-1,-1,-1,0,1,1,1,1}; //Prewiit Magnitude
                mask.put(0, 0, PWm); 
                break;
            }
            case 7: { 
                //Tratado lá embaixo
                break;}
            case 8: { 
               //Tratado lá embaixo
                break;
            }
            case 9: { 
                //Tratado lá embaixo
                break;
            }
            case 10: { 
                //MASCARAS DE KIRSH - passar todas e eleger o ´pixel mais intenso
                float K1[] = {5,-3,-3,5,0,-3,5,-3,-3};
                mask.put(0, 0, K1); 
                Mat k1 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
                Imgproc.filter2D(matImg1, k1, 0, mask );

                float K2[] = {-3,-3,-3,5,0,-3,5,5,-3};
                mask.put(0, 0, K2); 
                Mat k2 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());              
                Imgproc.filter2D(matImg1, k2, 0, mask );
                
                float K3[] = {-3,-3,-3,-3,0,-3,5,5,5};
                mask.put(0, 0, K3); 
                Mat k3 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());               
                Imgproc.filter2D(matImg1, k3, 0, mask );
                
                float K4[] = {-3,-3,-3,-3,0,5,-3,5,5};
                mask.put(0, 0, K4); 
                Mat k4 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());               
                Imgproc.filter2D(matImg1, k4, 0, mask );
                
                float K5[] = {-3,-3,5,-3,0,5,-3,-3,5};
                mask.put(0, 0, K5);
                Mat k5 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                 
                Imgproc.filter2D(matImg1, k5, 0, mask );
                
                float K6[] = {-3,5,5,-3,0,5,-3,-3,-3};
                mask.put(0, 0, K6); 
                Mat k6 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());              
                Imgproc.filter2D(matImg1, k6, 0, mask );
                
                float K7[] = {5,5,5,-3,0,-3,-3,-3,-3};
                mask.put(0, 0, K7); 
                Mat k7 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k7, 0, mask );
                
                float K8[] = {5,5,-3,5,0,-3,-3,-3,-3};
                mask.put(0, 0, K8); 
                Mat k8 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k8, 0, mask );
                
                
                //Seleciona o pixel que vai compor a imagem de saída
                matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
                
                double s[] = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
                
                //passa por todos os piixels de todas as imagens geradas pelas máscaras e escolhe o maior deles
             
                int x=0;
                for (int i = 0; i < matResult.rows(); i++) {
                    for (int j = 0; j < matResult.cols(); j++) {
                        //Verifica em todos as imagens para pegar o maior pixel
                        double maior=0;
                        if(maior < k1.get(i, j)[0]){
                            maior = k1.get(i, j)[0];
                        }
                        if(maior  < k2.get(i, j)[0]){
                            maior = k2.get(i, j)[0];
                        }
                        if(maior  < k3.get(i, j)[0]){
                            maior = k3.get(i, j)[0];
                        }
                        if(maior < k4.get(i, j)[0]){
                            maior = k4.get(i, j)[0];
                        }
                        if(maior  < k5.get(i, j)[0]){
                            maior = k5.get(i, j)[0];
                        }
                        if(maior  < k6.get(i, j)[0]){
                            maior = k6.get(i, j)[0];
                        }
                        if(maior  < k7.get(i, j)[0]){
                            maior = k7.get(i, j)[0];
                        }
                        if(maior  < k8.get(i, j)[0]){
                            maior = k8.get(i, j)[0];
                        }
                        s[x]= maior;
                       // System.out.println("Maior= " +maior);
                       
                        x++;
                    }
                    
                }
                
                    //Mostra cada mascara separada
                    int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja exibir os resultados das máscaras de Kirsh separados?","PDI - Processamento Digital de Imagens - José Carlos" ,JOptionPane.YES_NO_OPTION);
                
                    if (resp == 0){
                        ShowWindow.showWindow("Kirsh 1", k1); JOptionPane.showMessageDialog(null, "OK");                   
                        ShowWindow.showWindow("Kirsh 2", k2); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Kirsh 3", k3); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Kirsh 4", k4); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Kirsh 5", k5); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Kirsh 6", k6); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Kirsh 7", k7); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Kirsh 8", k8); JOptionPane.showMessageDialog(null, "OK");  
                    }
                    
                
                //Mostra o resultado
                matResult.put(0, 0, s);
              //  System.out.println("matResul: "+matResult.dump());
              //for (int k=0;k < s.length; k++ ){System.out.println("s[ "+k+" ] = "+s[k]);} //Verifica vetor
                mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
                return; //Sai do método
            }
            case 11: { 
                //MASCARAS DE ROBISON - passar todas e eleger o ´pixel mais intenso
                float K1[] = {1,0,-1,2,0,-2,1,0,-1};
                mask.put(0, 0, K1); 
                Mat k1 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
                Imgproc.filter2D(matImg1, k1, 0, mask );

                float K2[] = {0,-1,-2,1,0,-1,2,1,0};
                mask.put(0, 0, K2); 
                Mat k2 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());              
                Imgproc.filter2D(matImg1, k2, 0, mask );
                
                float K3[] = {-1,-2,-1,0,0,0,1,2,1};
                mask.put(0, 0, K3); 
                Mat k3 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());               
                Imgproc.filter2D(matImg1, k3, 0, mask );
                
                float K4[] = {-2,-1,0,-1,0,1,0,1,2};
                mask.put(0, 0, K4); 
                Mat k4 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());               
                Imgproc.filter2D(matImg1, k4, 0, mask );
                
                float K5[] = {-1,0,1,-2,0,2,-1,0,1};
                mask.put(0, 0, K5);
                Mat k5 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                 
                Imgproc.filter2D(matImg1, k5, 0, mask );
                
                float K6[] = {0,1,2,-1,0,1,-2,-1,0};
                mask.put(0, 0, K6); 
                Mat k6 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());              
                Imgproc.filter2D(matImg1, k6, 0, mask );
                
                float K7[] = {1,2,1,0,0,0,-1,-2,-1};
                mask.put(0, 0, K7); 
                Mat k7 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k7, 0, mask );
                
                float K8[] = {2,1,0,1,0,-1,0,-1,-2};
                mask.put(0, 0, K8); 
                Mat k8 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k8, 0, mask );
                
                
                //Seleciona o pixel que vai compor a imagem de saída
                matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
                
                double s[] = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
                
                //passa por todos os piixels de todas as imagens geradas pelas máscaras e escolhe o maior deles
             
                int x=0;
                for (int i = 0; i < matResult.rows(); i++) {
                    for (int j = 0; j < matResult.cols(); j++) {
                        //Verifica em todos as imagens para pegar o maior pixel
                        double maior=0;
                        if(maior < k1.get(i, j)[0]){
                            maior = k1.get(i, j)[0];
                        }
                        if(maior  < k2.get(i, j)[0]){
                            maior = k2.get(i, j)[0];
                        }
                        if(maior  < k3.get(i, j)[0]){
                            maior = k3.get(i, j)[0];
                        }
                        if(maior < k4.get(i, j)[0]){
                            maior = k4.get(i, j)[0];
                        }
                        if(maior  < k5.get(i, j)[0]){
                            maior = k5.get(i, j)[0];
                        }
                        if(maior  < k6.get(i, j)[0]){
                            maior = k6.get(i, j)[0];
                        }
                        if(maior  < k7.get(i, j)[0]){
                            maior = k7.get(i, j)[0];
                        }
                        if(maior  < k8.get(i, j)[0]){
                            maior = k8.get(i, j)[0];
                        }
                        s[x]= maior;
                       // System.out.println("Maior= " +maior);
                       
                        x++;
                    }
                    
                }
                
                    //Mostra cada mascara separada
                    int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja exibir os resultados das máscaras de Robison separados?","PDI - Processamento Digital de Imagens - José Carlos" ,JOptionPane.YES_NO_OPTION);
                
                    if (resp == 0){
                        ShowWindow.showWindow("Robison 1", k1); JOptionPane.showMessageDialog(null, "OK");                   
                        ShowWindow.showWindow("Robison 2", k2); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Robison 3", k3); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Robison 4", k4); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Robison 5", k5); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Robison 6", k6); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Robison 7", k7); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Robison 8", k8); JOptionPane.showMessageDialog(null, "OK");  
                    }
                    
                
                //Mostra o resultado
                matResult.put(0, 0, s);
              //  System.out.println("matResul: "+matResult.dump());
              //for (int k=0;k < s.length; k++ ){System.out.println("s[ "+k+" ] = "+s[k]);} //Verifica vetor
                mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
                return; //Sai do método
            }
            case 12: { 
                //MASCARAS DE FREI-CHEN - passar todas e eleger o ´pixel mais intenso
                float K1[] = {1, (float)Math.sqrt(2), 1,0,0,0,-1,-(float)Math.sqrt(2),-1}; 
                mask.put(0, 0, K1); 
                Mat k1 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
                Imgproc.filter2D(matImg1, k1, 0, mask );

                float K2[] = { 1,0,-1,(float)Math.sqrt(2),0,-(float)Math.sqrt(2),1,0,-1};
                mask.put(0, 0, K2); 
                Mat k2 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());              
                Imgproc.filter2D(matImg1, k2, 0, mask );
                
                float K3[] = {0,-1,(float)Math.sqrt(2),1,0,-1,-(float)Math.sqrt(2),1,0};
                mask.put(0, 0, K3); 
                Mat k3 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());               
                Imgproc.filter2D(matImg1, k3, 0, mask );
                
                float K4[] = {(float)Math.sqrt(2),-1,0,-1,0,1,0,1,-(float)Math.sqrt(2)};
                mask.put(0, 0, K4); 
                Mat k4 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());               
                Imgproc.filter2D(matImg1, k4, 0, mask );
                
                float K5[] = {0,1,0,-1,0,-1,0,1,0};
                mask.put(0, 0, K5);
                Mat k5 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                 
                Imgproc.filter2D(matImg1, k5, 0, mask );
                
                float K6[] = {-1,0,1,0,0,0,1,0,-1};
                mask.put(0, 0, K6); 
                Mat k6 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());              
                Imgproc.filter2D(matImg1, k6, 0, mask );
                
                float K7[] = {1,-2,1,-2,4,-2,1,-2,1};
                mask.put(0, 0, K7); 
                Mat k7 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k7, 0, mask );
                
                float K8[] = {-2,1,-2,1,4,1,-2,1,-2};
                mask.put(0, 0, K8); 
                Mat k8 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k8, 0, mask );
                
                float K9[] = {1,1,1,1,1,1,1,1,1};
                mask.put(0, 0, K9); 
                Mat k9 = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());                
                Imgproc.filter2D(matImg1, k9, 0, mask );
                
                //Seleciona o pixel que vai compor a imagem de saída
                matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
                
                double s[] = new double[matResult.cols() * matResult.rows() * (int)matResult.elemSize()];
                
                //passa por todos os piixels de todas as imagens geradas pelas máscaras e escolhe o maior deles
             
                int x=0;
                for (int i = 0; i < matResult.rows(); i++) {
                    for (int j = 0; j < matResult.cols(); j++) {
                        //Verifica em todos as imagens para pegar o maior pixel
                     /*   double maior=0;
                        if(maior < k1.get(i, j)[0]){
                            maior = k1.get(i, j)[0];
                        }
                        if(maior  < k2.get(i, j)[0]){
                            maior = k2.get(i, j)[0];
                        }
                        if(maior  < k3.get(i, j)[0]){
                            maior = k3.get(i, j)[0];
                        }
                        if(maior < k4.get(i, j)[0]){
                            maior = k4.get(i, j)[0];
                        }
                        if(maior  < k5.get(i, j)[0]){
                            maior = k5.get(i, j)[0];
                        }
                        if(maior  < k6.get(i, j)[0]){
                            maior = k6.get(i, j)[0];
                        }
                        if(maior  < k7.get(i, j)[0]){
                            maior = k7.get(i, j)[0];
                        }
                        if(maior  < k8.get(i, j)[0]){
                            maior = k8.get(i, j)[0];
                        }
                        if(maior  < k9.get(i, j)[0]){
                            maior = k9.get(i, j)[0];
                        }
                        
                        s[x]= maior;
                      */
                     
                     //Soma todos os pixels obtidos pelas máscaras - É NECESSÁRIO NORMALIZAR PARA ANTES DE EXIBIR
                     s[x]= k1.get(i, j)[0] + k2.get(i, j)[0] + k3.get(i, j)[0] + k4.get(i, j)[0] + k5.get(i, j)[0] + k6.get(i, j)[0] + k7.get(i, j)[0] + k8.get(i, j)[0] + k9.get(i, j)[0];
                        x++;
                    }
                    
                }
                //System.out.println("Maior= " +maior+ "   S[ "+ s[x]+" ]");
                     //   System.out.println(""+k9.dump());
                    //Mostra cada mascara separada
                    int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja exibir os resultados das máscaras de Frei-chen separados?","PDI - Processamento Digital de Imagens - José Carlos" ,JOptionPane.YES_NO_OPTION);
                
                    if (resp == 0){
                        ShowWindow.showWindow("Frei-Chen 1", k1); JOptionPane.showMessageDialog(null, "OK");                   
                        ShowWindow.showWindow("Frei-Chen 2", k2); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Frei-Chen 3", k3); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Frei-Chen 4", k4); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Frei-Chen 5", k5); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Frei-Chen 6", k6); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Frei-Chen ", k7); JOptionPane.showMessageDialog(null, "OK");
                        ShowWindow.showWindow("Frei-Chen 8", k8); JOptionPane.showMessageDialog(null, "OK");  
                        ShowWindow.showWindow("Frei-Chen 9", k9); JOptionPane.showMessageDialog(null, "OK");
                    }
                    
                
                //Mostra o resultado
              //  matResult.put(0, 0, s);
              //  System.out.println("matResul: "+matResult.dump());
              //for (int k=0;k < s.length; k++ ){System.out.println("s[ "+k+" ] = "+s[k]);} //Verifica vetor
                mostraImagem(ShowWindow.normalizaImagem(s, matResult), new Size(400,400), 0); //Exibe na imagem 3
                return; //Sai do método
            }
            case 13: { 
               //Tratado lá embaixo
                break;
            }
            
            case 14: { 
                float H1[] = {0, -1, 0, -1, 4, -1, 0, -1, 0};
                float H2[]  = {-1, -4,-1, -4, 20, -4, -1, -4, -1};
                
                int h = Integer.parseInt(JOptionPane.showInputDialog("Escolha o filtro de Detecção: \n "
                  + "1. H1\n" +
                    "2. H2","1"));
                if (h==1){ mask.put(0, 0, H1);}else if (h==2){ mask.put(0, 0, H2);}
                else{
                    JOptionPane.showConfirmDialog(null, "Opção inválida!"); return;
                }
                break;
            }
                            
            default: {JOptionPane.showMessageDialog(null, "Filtro inválido."); return;} 
         }
        //fim da criação da máscara
          int flag;
          if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
              switch(f){
                  case 7: {Imgproc.Sobel(matExibe, matExibe, 0, 1, 0); flag=1; break;
                 }
                  case 8: {Imgproc.Sobel(matExibe, matExibe, 0, 0, 1); flag=1; break;
                 }
                  case 9: {Imgproc.Sobel(matExibe, matExibe, 0, 1, 1); flag=1; break;
                 }
                  case 13: {Imgproc.Laplacian(matImg1, matResult, 0); flag=1; break; //LAPACIANO //APLICAÇÃO DE CONVOLUÇÃO 
                 }
                  default: flag=0;
              }
                
                if (flag==0){ Imgproc.filter2D(matExibe, matExibe, 0, mask ); } //APLICAÇÃO DE CONVOLUÇÃO  
                
                mostraImagem(matExibe, new Size(400,400), 0);
            }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
            switch(f){
                  case 7: {Imgproc.Sobel(matImg1, matResult, 0, 1, 0); flag=1; break;
                 }
                  case 8: {Imgproc.Sobel(matImg1, matResult, 0, 0, 1); flag=1; break;
                 }
                  case 9: {Imgproc.Sobel(matImg1, matResult, 0, 1, 1); flag=1; break;
                 }
                  case 13: {Imgproc.Laplacian(matImg1, matResult, 0); flag=1; break;//LAPACIANO  //APLICAÇÃO DE CONVOLUÇÃO; 
                 }
                  default: flag=0;
              }
                
                if (flag==0){ Imgproc.filter2D(matImg1, matResult, 0, mask ); } //APLICAÇÃO DE CONVOLUÇÃO 
                
                mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
          
          
         
        
    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        // TODO add your handling code here:
        // DETECÇÃO DE RETAS
        
        if (jlImg1.getIcon()==null){return;}    
        //Pega o filtro
          int f = Integer.parseInt(JOptionPane.showInputDialog("Escolha o filtro: \n " +
                "1. Horizontal\n"+
                "2. Vertical\n" +
                "3. 45 graus\n" +
                "4. 135 graus", "1"));
         
        //Criação da máscara
        Mat mask = new Mat(3, 3, CvType.CV_32FC1 ); //usar tipo: CvType.CV_32FC1 por causa da função de convolução
       
        switch (f){
            case 1: { 
                float h1[] = {-1,-1,-1,2,2,2,-1,-1,-1};//HORIZONTAL
                mask.put(0, 0, h1); 
                break;
            }
            case 2: { 
                float h3[]  = {-1,2,-1,-1,2,-1,-1,2,-1}; //VERTICAL
                mask.put(0, 0, h3); 
                break;}
            case 3: { 
                float h2[]  = {-1,-1,2,-1,2,-1,2,-1,-1};//45 GRAUS
                mask.put(0, 0, h2); 
                break;}
            case 4: { 
                float h4[]  = {2,-1,-1,-1,2,-1,-1,-1,2}; //135 GRAUS
                mask.put(0, 0, h4); 
                break;}
            
            default: {JOptionPane.showMessageDialog(null, "Filtro inválido."); return;} 
         }
        //fim da criação da máscara
        
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            
            Imgproc.filter2D(matExibe, matExibe, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());

            Imgproc.filter2D(matImg1, matResult, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        // TODO add your handling code here:
        //DETECÇÃO DE PONTOS
        if (jlImg1.getIcon()==null){return;}   
        
        int T = Integer.parseInt(JOptionPane.showInputDialog("Informeo valor de T ", "8"));
        
        Mat mask = new Mat(3, 3, CvType.CV_32FC1 ); //usar tipo: CvType.CV_32FC1 por causa da função de convolução
        //criação da máscara
        float h[]  = {-1,-1,-1,-1,8,-1,-1,-1,-1}; //T é fornecido pelo usuário
        
        mask.put(0, 0, h); 
    
        //fim da criação da máscara
        
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            
            Imgproc.filter2D(matExibe, matExibe, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());

            Imgproc.filter2D(matImg1, matResult, 0, mask ); //APLICAÇÃO DE CONVOLUÇÃO
            
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
        // TODO add your handling code here:
        //LIMIARIZAÇÃO GLOBAL
        if (jlImg1.getIcon()==null){return;}   
        
        int L = Integer.parseInt(JOptionPane.showInputDialog("Informeo valor do Limiar ", "100"));
        
                
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            
            Imgproc.threshold(matExibe, matExibe, L, 255, Imgproc.THRESH_BINARY);
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
           
            Imgproc.threshold(matImg1, matResult, L, 255, Imgproc.THRESH_BINARY);             
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        // TODO add your handling code here:
        //LIMIARIZAÇÃO LOCAL
        if (jlImg1.getIcon()==null){return;}   
        
        int n = Integer.parseInt(JOptionPane.showInputDialog("Informeo valor de n ", "3"));
        double k = Double.parseDouble(JOptionPane.showInputDialog("Informeo valor de k ", "1"));
        
         //AJEITAR AQUI       
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            
            Imgproc.adaptiveThreshold(matExibe, matExibe, 255, Imgproc.ADAPTIVE_THRESH_MEAN_C,Imgproc.THRESH_BINARY, n, k);
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  matImg1.type());
            Imgproc.adaptiveThreshold(matImg1, matResult, 255, Imgproc.ADAPTIVE_THRESH_MEAN_C,Imgproc.THRESH_BINARY, n, k);            
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
            }
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        // TODO add your handling code here:
        // MÍNIMO
        if (jlImg1.getIcon()==null){return;}    
        //Pega o tamanho
         // int t = Integer.parseInt(JOptionPane.showInputDialog("Forneça o tamanho.", "3"));
        double v[] = new double[matImg1.cols() * matImg1.rows() * (int)matImg1.elemSize()];
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
          
        int x=0;
        
        for (int i = 0; i < matExibe.rows(); i++) {
                for (int j = 0; j < matExibe.cols(); j++) {                           
                    double minimo=1000000000;
                    try {
                        if (minimo > matExibe.get(i-1, j-1)[0] ){
                            minimo = matExibe.get(i-1, j-1)[0];
                        }
                        if (minimo > matExibe.get(i, j-1)[0] ){
                            minimo = matExibe.get(i, j-1)[0];
                        }
                        if (minimo > matExibe.get(i+1, j-1)[0]  ){
                            minimo =  matExibe.get(i+1, j-1)[0] ;
                        }
                        if (minimo > matExibe.get(i-1, j)[0]){
                            minimo = matExibe.get(i-1, j)[0];
                        }
                        if (minimo > matExibe.get(i, j)[0]){
                            minimo = matExibe.get(i, j)[0];
                        }
                        if (minimo > matExibe.get(i+1, j)[0] ){
                            minimo = matExibe.get(i+1, j)[0];
                        }
                        if (minimo > matExibe.get(i-1, j+1)[0] ){
                            minimo = matExibe.get(i-1, j+1)[0];
                        }
                        if (minimo >  matExibe.get(i, j+1)[0] ){
                            minimo =  matExibe.get(i, j+1)[0];
                        }
                        if (minimo >  matExibe.get(i+1, j+1)[0] ){
                            minimo =  matExibe.get(i+1, j+1)[0];
                        }
                        
                        
                    } catch (Exception e) {
                        v[x]=0;
                    }
                    
                    v[x] = minimo;
                    x++;   
                }
            } 
        
           // matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            matExibe.put(0, 0, v);
            
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            
            int x=0;
        
        for (int i = 0; i < matImg1.rows(); i++) {
                for (int j = 0; j < matImg1.cols(); j++) {                           
                    double minimo=1000000000;
                    try {
                        if (minimo > matImg1.get(i-1, j-1)[0] ){
                            minimo = matImg1.get(i-1, j-1)[0];
                        }
                        if (minimo > matImg1.get(i, j-1)[0] ){
                            minimo = matImg1.get(i, j-1)[0];
                        }
                        if (minimo >  matImg1.get(i+1, j-1)[0]  ){
                            minimo =  matImg1.get(i+1, j-1)[0] ;
                        }
                        if (minimo > matImg1.get(i-1, j)[0]){
                            minimo = matImg1.get(i-1, j)[0];
                        }
                        if (minimo > matImg1.get(i, j)[0]){
                            minimo = matImg1.get(i, j)[0];
                        }
                        if (minimo > matImg1.get(i+1, j)[0] ){
                            minimo = matImg1.get(i+1, j)[0];
                        }
                        if (minimo > matImg1.get(i-1, j+1)[0] ){
                            minimo = matImg1.get(i-1, j+1)[0];
                        }
                        if (minimo >  matImg1.get(i, j+1)[0] ){
                            minimo =  matImg1.get(i, j+1)[0];
                        }
                        if (minimo >  matImg1.get(i+1, j+1)[0] ){
                            minimo =  matImg1.get(i+1, j+1)[0];
                        }
                        
                        
                    } catch (Exception e) {
                        v[x]=0;
                    }
                    
                    v[x] = minimo;
                    x++;   
                }
            }
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            matResult.put(0, 0, v);
             
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
        } 
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        // TODO add your handling code here:
        // MODA
        if (jlImg1.getIcon()==null){return;}    
        //Pega o tamanho
         // int t = Integer.parseInt(JOptionPane.showInputDialog("Forneça o tamanho.", "3"));
        double v[] = new double[matImg1.cols() * matImg1.rows() * (int)matImg1.elemSize()];
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
          
        int x=0;
        
        for (int i = 0; i < matExibe.rows(); i++) {
                for (int j = 0; j < matExibe.cols(); j++) {                           
                    double moda=0;
                    double m[] = new double[9];
                    try {
                        m[0] = matExibe.get(i-1, j-1)[0];
                        m[1] = matExibe.get(i, j-1)[0]; 
                        m[2] = matExibe.get(i+1, j-1)[0]; 
                        m[3] = matExibe.get(i-1, j)[0];
                        m[4] = matExibe.get(i, j)[0];
                        m[5] = matExibe.get(i+1, j)[0]; 
                        m[6] = matExibe.get(i-1, j+1)[0]; 
                        m[7] = matExibe.get(i, j+1)[0];
                        m[8] = matExibe.get(i+1, j+1)[0]; 
                        
                        double md[]={0,0,0,0,0,0,0,0,0};
                        
                        for (int y=0; y<m.length; y++){
                           for (int z=0; z<m.length; z++){
                                if (m[y] == m[z]){
                                    md[y]= md[y]+1;
                                }
                            } 
                            
                        }
                        int pos=0;
                        for(int k=0; k<md.length; k++){
                            if(pos < md[k]){pos = k; }
                        }
                        moda = m[pos];
                      v[x] = moda;  
                        
                    } catch (Exception e) {
                        v[x]=0;
                    }
                    
                    //v[x] = moda;
                    x++;   
                }
            } 
        
           // matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            matExibe.put(0, 0, v);
            
            mostraImagem(matExibe, new Size(400,400), 0);
        }else{
            
            int x=0;
        
        for (int i = 0; i < matImg1.rows(); i++) {
                for (int j = 0; j < matImg1.cols(); j++) {                           
                    double moda=0;
                    double m[] = new double[9];
                    try {
                        m[0] = matImg1.get(i-1, j-1)[0];
                        m[1] = matImg1.get(i, j-1)[0]; 
                        m[2] = matImg1.get(i+1, j-1)[0]; 
                        m[3] = matImg1.get(i-1, j)[0];
                        m[4] = matImg1.get(i, j)[0];
                        m[5] = matImg1.get(i+1, j)[0]; 
                        m[6] = matImg1.get(i-1, j+1)[0]; 
                        m[7] = matImg1.get(i, j+1)[0];
                        m[8] = matImg1.get(i+1, j+1)[0]; 
                        
                        double md[]={0,0,0,0,0,0,0,0,0};
                        
                        for (int y=0; y<m.length; y++){
                           for (int z=y; z<m.length; z++){
                                if (m[y] == m[z]){
                                    md[y]= md[y]+1;
                                }
                            } 
                           // System.out.println("M "+m[y]);
                        }
                        int pos=0;
                        for(int k=0; k<md.length; k++){
                            if(pos < md[k]){pos = k; }
                        }
                        moda = m[pos];
                        //System.out.println("Moda "+moda);
                        
                        
                    } catch (Exception e) {
                        
                        v[x]=0;
                    }
                    
                    v[x] = moda;
                    x++;   
                }
            } 
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            matResult.put(0, 0, v);
             
            mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
        }
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        // TODO add your handling code here:
        //PONTILHADO COM DIFUSÃO
                if (jlImg1.getIcon()==null){return;}  
        
 if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
            double erro=0; 
            for (int i = 0; i < matExibe.rows(); i++) {
                for (int j = 0; j < matExibe.cols(); j++) {

                    if (matExibe.get(i, j)[0] + erro < 127){   
                        matExibe.put(i, j, 0);   
                        erro = matExibe.get(i, j)[0];
                    }else {  
                        matExibe.put(i, j, 255);
                        erro = 0;
                    }   
                }
            }
                mostraImagem(matExibe, new Size(400,400), 0);
                
            }else{
            matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
            double erro=0; 
            for (int i = 0; i < matImg1.rows(); i++) {
                for (int j = 0; j < matImg1.cols(); j++) {

                    if (matImg1.get(i, j)[0] + erro < 127){   
                        matResult.put(i, j, 0);   
                        erro = matImg1.get(i, j)[0];
                    }else {  
                        matResult.put(i, j, 255);
                        erro = 0;
                    }   
                }
           }              
                mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
         }
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem31ActionPerformed
        // TODO add your handling code here:
        if (jlImg1.getIcon()==null){return;}  
        
        if (jCheckBoxCompsta.isSelected()){ //Pega a saida anterior como entrada
                  
                   
                       mostraImagem(matExibe, new Size(400,400), 0);

                   }else{
                   matResult = new Mat( matImg1.rows(), matImg1.cols(),  CvType.CV_8UC1);
                   
                      //Imgproc.matchTemplate(matImg1, matImg2, matResult, 1 - TESTE DE LOCALIZAÇÃO DE IMAGEM EM OUTRA
                               
                       mostraImagem(matResult, new Size(400,400), 0); //Exibe na imagem 3
                }
        
    }//GEN-LAST:event_jMenuItem31ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxCompsta;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuItemAND;
    private javax.swing.JMenuItem jMenuItemCisalhamento;
    private javax.swing.JMenuItem jMenuItemDiv;
    private javax.swing.JMenuItem jMenuItemEscala;
    private javax.swing.JMenuItem jMenuItemMul;
    private javax.swing.JMenuItem jMenuItemOR;
    private javax.swing.JMenuItem jMenuItemPseudoCores;
    private javax.swing.JMenuItem jMenuItemReflexao;
    private javax.swing.JMenuItem jMenuItemRotacao;
    private javax.swing.JMenuItem jMenuItemSoma;
    private javax.swing.JMenuItem jMenuItemSub;
    private javax.swing.JMenuItem jMenuItemTranslacao;
    private javax.swing.JMenuItem jMenuItemXOR;
    private javax.swing.JButton jbImg1;
    private javax.swing.JButton jbImg2;
    private javax.swing.JLabel jlImg1;
    private javax.swing.JLabel jlImg2;
    private javax.swing.JLabel jlResult;
    // End of variables declaration//GEN-END:variables
}
